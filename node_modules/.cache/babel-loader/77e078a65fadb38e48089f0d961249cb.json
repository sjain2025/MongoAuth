{"ast":null,"code":"var _jsxFileName = \"/Users/sandeepjain/mongoauth/src/pages/Login.page.js\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { UserContext } from \"/Users/sandeepjain/mongoauth/src/contexts/user.contexts.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const location = useLocation(); // We are consuming our user-management context to \n  // get & set the user details here\n\n  const {\n    user,\n    fetchUser,\n    emailPasswordLogin\n  } = useContext(UserContext); // We are using React's \"useState\" hook to keep track\n  //  of the form values.\n\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\"\n  }); // This function will be called whenever the user edits the form.\n\n  const onFormInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setForm({ ...form,\n      [name]: value\n    });\n  }; // This function will redirect the user to the \n  // appropriate page once the authentication is done.\n\n\n  const redirectNow = () => {\n    const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n    navigate(redirectTo ? redirectTo : \"/\");\n  }; // Since there can be chances that the user is already logged in\n  // but whenever the app gets refreshed the user context will become\n  // empty. So we are checking if the user is already logged in and\n  // if so we are redirecting the user to the home page.\n  // Otherwise we will do nothing and let the user to login.\n\n\n  const loadUser = async () => {\n    if (!user) {\n      const fetchedUser = await fetchUser();\n\n      if (fetchedUser) {\n        // Redirecting them once fetched.\n        redirectNow();\n      }\n    }\n  }; // This useEffect will run only once when the component is mounted.\n  // Hence this is helping us in verifying whether the user is already logged in\n  // or not.\n\n\n  useEffect(() => {\n    loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // This function gets fired when the user clicks on the \"Login\" button.\n\n  const onSubmit = async event => {\n    try {\n      // Here we are passing user details to our emailPasswordLogin\n      // function that we imported from our realm/authentication.js\n      // to validate the user credentials and login the user into our App.\n      const user = await emailPasswordLogin(form.email, form.password);\n\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      alert(\"Login was invalid: please create an account or type in the email and password associated with your account to log in.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      maxWidth: \"500px\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: \"padding-top: 50px\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Email\",\n      type: \"email\",\n      variant: \"outlined\",\n      name: \"email\",\n      value: form.email,\n      onChange: onFormInputChange,\n      style: {\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Password\",\n      type: \"password\",\n      variant: \"outlined\",\n      name: \"password\",\n      value: form.password,\n      onChange: onFormInputChange,\n      style: {\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: onSubmit,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/signup\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Login, \"NdXHtX35e9rBA7ZEcjukWzPN3w4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["Button","TextField","useContext","useEffect","useState","Link","useLocation","useNavigate","UserContext","Login","navigate","location","user","fetchUser","emailPasswordLogin","form","setForm","email","password","onFormInputChange","event","name","value","target","redirectNow","redirectTo","search","replace","loadUser","fetchedUser","onSubmit","error","alert","display","flexDirection","maxWidth","margin","marginBottom"],"sources":["/Users/sandeepjain/mongoauth/src/pages/Login.page.js"],"sourcesContent":["import { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { UserContext } from \"/Users/sandeepjain/mongoauth/src/contexts/user.contexts.js\";\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // We are consuming our user-management context to \n  // get & set the user details here\n  const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\n\n  // We are using React's \"useState\" hook to keep track\n  //  of the form values.\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  // This function will be called whenever the user edits the form.\n  const onFormInputChange = (event) => {\n    const { name, value } = event.target;\n    setForm({ ...form, [name]: value });\n  };\n\n  // This function will redirect the user to the \n  // appropriate page once the authentication is done.\n  const redirectNow = () => {\n    const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n    navigate(redirectTo ? redirectTo : \"/\");\n  }\n\n  // Since there can be chances that the user is already logged in\n  // but whenever the app gets refreshed the user context will become\n  // empty. So we are checking if the user is already logged in and\n  // if so we are redirecting the user to the home page.\n  // Otherwise we will do nothing and let the user to login.\n  const loadUser = async () => {\n    if (!user) {\n      const fetchedUser = await fetchUser();\n      if (fetchedUser) {\n        // Redirecting them once fetched.\n        redirectNow();\n      }\n    }\n  }\n\n  // This useEffect will run only once when the component is mounted.\n  // Hence this is helping us in verifying whether the user is already logged in\n  // or not.\n  useEffect(() => {\n    loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // This function gets fired when the user clicks on the \"Login\" button.\n  const onSubmit = async (event) => {\n    try {\n      // Here we are passing user details to our emailPasswordLogin\n      // function that we imported from our realm/authentication.js\n      // to validate the user credentials and login the user into our App.\n      const user = await emailPasswordLogin(form.email, form.password);\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      alert(\"Login was invalid: please create an account or type in the email and password associated with your account to log in.\")\n    }\n  };\n\n  return <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"500px\", margin: \"auto\" }}>\n    <h1 style={\"padding-top: 50px\"}>Login</h1>\n    <TextField\n      label=\"Email\"\n      type=\"email\"\n      variant=\"outlined\"\n      name=\"email\"\n      value={form.email}\n      onChange={onFormInputChange}\n      style={{ marginBottom: \"1rem\" }}\n    />\n    <TextField\n      label=\"Password\"\n      type=\"password\"\n      variant=\"outlined\"\n      name=\"password\"\n      value={form.password}\n      onChange={onFormInputChange}\n      style={{ marginBottom: \"1rem\" }}\n    />\n    <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\n      Login\n    </Button>\n    <p>Don't have an account? <Link to=\"/signup\">Sign Up</Link></p>\n  </form>\n}\n\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module"}