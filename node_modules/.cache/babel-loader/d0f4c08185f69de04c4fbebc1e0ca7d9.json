{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * @param {array|object} args Arguments to clean.\n * @return {array|object} A recursive copy of the argument, with properties removed where value is undefined.\n */\nfunction cleanArguments(args) {\n  if (Array.isArray(args)) {\n    return args.map(cleanArguments);\n  } else if (typeof args === \"object\") {\n    const result = {};\n\n    for (const [k, v] of Object.entries(args)) {\n      if (typeof v !== \"undefined\") {\n        result[k] = v;\n      }\n    }\n\n    return result;\n  } else {\n    return args;\n  }\n}\n\nmodule.exports = {\n  cleanArguments,\n\n  /**\n   * Helper to wrap callback-taking C++ function into a Promise-returning JS function\n   * @example\n   * // floop() is a wrapper method on a type with a _floop C++ method.\n   * function floop(how, why) {\n   *   return promisify(cb => this._floop(how, why, cb));\n   * }\n   */\n  promisify(func) {\n    return new Promise((resolve, reject) => {\n      func(function () {\n        var _ref;\n\n        if (arguments.length < 1 || arguments.length > 2) throw Error(`invalid cbargs length ${arguments.length}`);\n        let error = (_ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]);\n\n        if (error) {\n          reject(error);\n        } else if (arguments.length == 2) {\n          resolve(arguments.length <= 0 ? undefined : arguments[0]);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n\n  /**\n   * Determines the environment in which the package is being loaded.\n   * @returns A string representing the environment.\n   */\n  getEnvironment() {\n    // If process.release.name is an object with we're probably running in Node or Electron\n    // From: http://stackoverflow.com/a/24279593/1417293\n    if (typeof process === \"object\" && typeof process.release === \"object\" && process.release.name === \"node\") {\n      // Visual Studio Code defines the global.__debug__ object.\n      if (typeof global === \"object\" && global.__debug__) {\n        return \"vscodedebugger\";\n      }\n\n      return typeof process.versions === \"object\" && typeof process.versions.electron === \"string\" ? \"electron\" : \"node.js\";\n    } // When running via Jest, the jest object is defined.\n\n\n    if (typeof jest === \"object\") {\n      return \"node.js\";\n    }\n    /* global navigator */\n\n\n    if (typeof navigator === \"object\" && navigator.product === \"ReactNative\") {\n      // eslint-disable-line no-undef\n      // Visual Studio Code defines the global.__debug__ object.\n      if (typeof global !== \"undefined\" && global.__debug__) {\n        return \"vscodedebugger\";\n      } // Check if its in remote js debugging mode\n      // https://stackoverflow.com/a/50377644\n\n\n      if (typeof DedicatedWorkerGlobalScope !== \"undefined\") {\n        return \"chromedebugger\";\n      } // Otherwise, we must be in a \"normal\" react native situation.\n      // In that case, the Realm type should have been injected by the native code.\n      // If it hasn't, the user likely forgot to install the RealmJS CocoaPod\n\n\n      if (typeof Realm === \"undefined\") {\n        throw new Error('Missing Realm constructor. Did you run \"pod install\"? Please see https://realm.io/docs/react-native/latest/#missing-realm-constructor for troubleshooting');\n      }\n\n      return \"reactnative\";\n    } // If we're not running in React Native but we already injected the Realm class,\n    // we are probably running in a pure jscore environment\n\n\n    if (typeof Realm !== \"undefined\") {\n      return \"jscore\";\n    } // Visual Studio Code defines the global.__debug__ object.\n\n\n    if (typeof global !== \"undefined\" && global.__debug__) {\n      return \"vscodedebugger\";\n    } // Finally, if the navigator.userAgent contains the string \"Chrome\", we're likely\n    // running via the chrome debugger, even if navigator.product isn't set to \"ReactNative\"\n\n\n    if (typeof navigator !== \"undefined\" && /Chrome/.test(navigator.userAgent)) {\n      // eslint-disable-line no-undef\n      return \"chromedebugger\";\n    }\n\n    throw new Error(\"Unknown execution context\");\n  },\n\n  /**\n   * @returns An object with names and versions of the various components making up the context.\n   */\n  getVersions() {\n    const packageJson = require(\"../package.json\");\n\n    const packageVersion = packageJson.version;\n    const environment = this.getEnvironment();\n\n    try {\n      if (environment === \"reactnative\") {\n        const {\n          Platform\n        } = require(\"react-native\");\n\n        return {\n          packageVersion,\n          platformContext: environment,\n          platformOs: Platform.OS,\n          // Android reports a number ...\n          platformVersion: `${Platform.Version}`\n        };\n      } else if (environment === \"node.js\" || environment === \"electron\") {\n        return {\n          packageVersion,\n          platformContext: environment,\n          platformOs: process.platform,\n          platformVersion: process.versions.electron || process.version\n        };\n      }\n    } catch (err) {\n      console.warn(\"Error getting versions:\", err.stack);\n    }\n\n    return {\n      packageVersion,\n      platformContext: environment,\n      platformOs: \"unknown\",\n      platformVersion: \"?.?.?\"\n    };\n  }\n\n};","map":{"version":3,"names":["cleanArguments","args","Array","isArray","map","result","k","v","Object","entries","module","exports","promisify","func","Promise","resolve","reject","length","Error","error","getEnvironment","process","release","name","global","__debug__","versions","electron","jest","navigator","product","DedicatedWorkerGlobalScope","Realm","test","userAgent","getVersions","packageJson","require","packageVersion","version","environment","Platform","platformContext","platformOs","OS","platformVersion","Version","platform","err","console","warn","stack"],"sources":["/Users/sandeepjain/mongoauth/node_modules/realm/lib/utils.js"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * @param {array|object} args Arguments to clean.\n * @return {array|object} A recursive copy of the argument, with properties removed where value is undefined.\n */\nfunction cleanArguments(args) {\n  if (Array.isArray(args)) {\n    return args.map(cleanArguments);\n  } else if (typeof args === \"object\") {\n    const result = {};\n    for (const [k, v] of Object.entries(args)) {\n      if (typeof v !== \"undefined\") {\n        result[k] = v;\n      }\n    }\n    return result;\n  } else {\n    return args;\n  }\n}\n\nmodule.exports = {\n  cleanArguments,\n\n  /**\n   * Helper to wrap callback-taking C++ function into a Promise-returning JS function\n   * @example\n   * // floop() is a wrapper method on a type with a _floop C++ method.\n   * function floop(how, why) {\n   *   return promisify(cb => this._floop(how, why, cb));\n   * }\n   */\n  promisify(func) {\n    return new Promise((resolve, reject) => {\n      func((...cbargs) => {\n        if (cbargs.length < 1 || cbargs.length > 2) throw Error(`invalid cbargs length ${cbargs.length}`);\n        let error = cbargs[cbargs.length - 1];\n        if (error) {\n          reject(error);\n        } else if (cbargs.length == 2) {\n          resolve(cbargs[0]);\n        } else {\n          resolve();\n        }\n      });\n    });\n  },\n\n  /**\n   * Determines the environment in which the package is being loaded.\n   * @returns A string representing the environment.\n   */\n  getEnvironment() {\n    // If process.release.name is an object with we're probably running in Node or Electron\n    // From: http://stackoverflow.com/a/24279593/1417293\n    if (typeof process === \"object\" && typeof process.release === \"object\" && process.release.name === \"node\") {\n      // Visual Studio Code defines the global.__debug__ object.\n      if (typeof global === \"object\" && global.__debug__) {\n        return \"vscodedebugger\";\n      }\n\n      return typeof process.versions === \"object\" && typeof process.versions.electron === \"string\"\n        ? \"electron\"\n        : \"node.js\";\n    }\n\n    // When running via Jest, the jest object is defined.\n    if (typeof jest === \"object\") {\n      return \"node.js\";\n    }\n\n    /* global navigator */\n    if (typeof navigator === \"object\" && navigator.product === \"ReactNative\") {\n      // eslint-disable-line no-undef\n      // Visual Studio Code defines the global.__debug__ object.\n      if (typeof global !== \"undefined\" && global.__debug__) {\n        return \"vscodedebugger\";\n      }\n\n      // Check if its in remote js debugging mode\n      // https://stackoverflow.com/a/50377644\n      if (typeof DedicatedWorkerGlobalScope !== \"undefined\") {\n        return \"chromedebugger\";\n      }\n\n      // Otherwise, we must be in a \"normal\" react native situation.\n      // In that case, the Realm type should have been injected by the native code.\n      // If it hasn't, the user likely forgot to install the RealmJS CocoaPod\n      if (typeof Realm === \"undefined\") {\n        throw new Error(\n          'Missing Realm constructor. Did you run \"pod install\"? Please see https://realm.io/docs/react-native/latest/#missing-realm-constructor for troubleshooting',\n        );\n      }\n\n      return \"reactnative\";\n    }\n\n    // If we're not running in React Native but we already injected the Realm class,\n    // we are probably running in a pure jscore environment\n    if (typeof Realm !== \"undefined\") {\n      return \"jscore\";\n    }\n\n    // Visual Studio Code defines the global.__debug__ object.\n    if (typeof global !== \"undefined\" && global.__debug__) {\n      return \"vscodedebugger\";\n    }\n\n    // Finally, if the navigator.userAgent contains the string \"Chrome\", we're likely\n    // running via the chrome debugger, even if navigator.product isn't set to \"ReactNative\"\n    if (typeof navigator !== \"undefined\" && /Chrome/.test(navigator.userAgent)) {\n      // eslint-disable-line no-undef\n      return \"chromedebugger\";\n    }\n\n    throw new Error(\"Unknown execution context\");\n  },\n\n  /**\n   * @returns An object with names and versions of the various components making up the context.\n   */\n  getVersions() {\n    const packageJson = require(\"../package.json\");\n    const packageVersion = packageJson.version;\n    const environment = this.getEnvironment();\n\n    try {\n      if (environment === \"reactnative\") {\n        const { Platform } = require(\"react-native\");\n        return {\n          packageVersion,\n          platformContext: environment,\n          platformOs: Platform.OS,\n          // Android reports a number ...\n          platformVersion: `${Platform.Version}`,\n        };\n      } else if (environment === \"node.js\" || environment === \"electron\") {\n        return {\n          packageVersion,\n          platformContext: environment,\n          platformOs: process.platform,\n          platformVersion: process.versions.electron || process.version,\n        };\n      }\n    } catch (err) {\n      console.warn(\"Error getting versions:\", err.stack);\n    }\n\n    return {\n      packageVersion,\n      platformContext: environment,\n      platformOs: \"unknown\",\n      platformVersion: \"?.?.?\",\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}