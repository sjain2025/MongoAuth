{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst {\n  symbols\n} = require(\"@realm/common\"); // React Native `Proxy` objects when not using JSI are not compatible with\n// `JSValueIsObjectOfClass`, because it seems JSC is not able to \"unwrap\"\n// the proxy - see https://github.com/realm/realm-js/issues/4507#issuecomment-1112237740.\n//\n// In order to enable the return value of Realm React's `useQuery` (which are wrapped\n// in a proxy) to be passed to the subscription mutation methods, we need to store\n// the unproxied results on the proxy object as a non-enumerable field with a symbol key\n// (see `useQuery.ts` in @realm/react), then in here, we check if that field exists, and\n// if so we pass the original unproxied results to C++.\n//\n// Once our v11 branch is merged, we can revert this change as JSI React Native `Proxy`s\n// work fine, by reverting PR #4541.\n\n\nconst instanceMethods = {\n  add(query, options) {\n    return this._add(query[symbols.PROXY_TARGET] || query, options);\n  },\n\n  remove(query) {\n    return this._remove(query[symbols.PROXY_TARGET] || query);\n  }\n\n};\nconst staticMethods = {// none\n};\nmodule.exports = {\n  static: staticMethods,\n  instance: instanceMethods\n};","map":{"version":3,"names":["symbols","require","instanceMethods","add","query","options","_add","PROXY_TARGET","remove","_remove","staticMethods","module","exports","static","instance"],"sources":["/Users/sandeepjain/mongoauth/node_modules/realm/lib/mutable-subscription-set.js"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nconst { symbols } = require(\"@realm/common\");\n\n// React Native `Proxy` objects when not using JSI are not compatible with\n// `JSValueIsObjectOfClass`, because it seems JSC is not able to \"unwrap\"\n// the proxy - see https://github.com/realm/realm-js/issues/4507#issuecomment-1112237740.\n//\n// In order to enable the return value of Realm React's `useQuery` (which are wrapped\n// in a proxy) to be passed to the subscription mutation methods, we need to store\n// the unproxied results on the proxy object as a non-enumerable field with a symbol key\n// (see `useQuery.ts` in @realm/react), then in here, we check if that field exists, and\n// if so we pass the original unproxied results to C++.\n//\n// Once our v11 branch is merged, we can revert this change as JSI React Native `Proxy`s\n// work fine, by reverting PR #4541.\nconst instanceMethods = {\n  add(query, options) {\n    return this._add(query[symbols.PROXY_TARGET] || query, options);\n  },\n\n  remove(query) {\n    return this._remove(query[symbols.PROXY_TARGET] || query);\n  },\n};\n\nconst staticMethods = {\n  // none\n};\n\nmodule.exports = {\n  static: staticMethods,\n  instance: instanceMethods,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM;EAAEA;AAAF,IAAcC,OAAO,CAAC,eAAD,CAA3B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAG;EACtBC,GAAG,CAACC,KAAD,EAAQC,OAAR,EAAiB;IAClB,OAAO,KAAKC,IAAL,CAAUF,KAAK,CAACJ,OAAO,CAACO,YAAT,CAAL,IAA+BH,KAAzC,EAAgDC,OAAhD,CAAP;EACD,CAHqB;;EAKtBG,MAAM,CAACJ,KAAD,EAAQ;IACZ,OAAO,KAAKK,OAAL,CAAaL,KAAK,CAACJ,OAAO,CAACO,YAAT,CAAL,IAA+BH,KAA5C,CAAP;EACD;;AAPqB,CAAxB;AAUA,MAAMM,aAAa,GAAG,CACpB;AADoB,CAAtB;AAIAC,MAAM,CAACC,OAAP,GAAiB;EACfC,MAAM,EAAEH,aADO;EAEfI,QAAQ,EAAEZ;AAFK,CAAjB"},"metadata":{},"sourceType":"script"}