{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * Check whether the user's app is running in \"development mode\" (e.g. `npm run dev`\n * for a React app, or `NODE_ENV=development` for a Node app). Each platform's entry\n * point should define the value of this using `setIsDevelopmentMode`.\n * The default behaviour is to always return `false`.\n *\n * @returns true if the user's app is running in development mode, false otherwise\n */\nlet isDevelopmentMode = false;\n/**\n * Set the value of `isDevelopmentMode`. This allows each entry point (node vs DOM)\n * to use its own method for determining whether we are in development mode.\n *\n * @param state A boolean indicating whether the user's app is running in\n * development mode or not.\n */\n\nconst setIsDevelopmentMode = state => {\n  isDevelopmentMode = state;\n}; ////////////////////////////////////////////////////////////////////////////\n\n/**\n * Display a deprecation warning for features being removed in the next major version\n * to users in development mode (as best as we can detect this, see `isDevelopmentMode`)\n *\n * @param deprecatedItem The method signature or name of the deprecated item\n * @param suggestedReplacement The method signature or name of the suggested replacement\n */\n\n\nconst deprecationWarning = (deprecatedItem, suggestedReplacement) => {\n  if (!isDevelopmentMode) return;\n  console.warn(`Deprecation warning from Realm: ${deprecatedItem} is deprecated and will be removed in a future major release. Consider switching to ${suggestedReplacement}.`);\n};\n/**\n * Helper function for migrating from positional arguments to a single dictionary argument.\n * Check the arguments passed to a function, if the first argument is not an object (i.e. it\n * is presumed to be a deprecated positional-style call), shows a deprecation warning and\n * converts the positional arguments into an object matching the expected \"new\" shape.\n *\n * @param args Array of arguments passed to the function (captured with `...args`).\n * @param methodName The name of the method, used to show the deprecation warning.\n * @param argNames The list of positional argument names, used to covert them into\n * an object if a deprecated call is made and to show the deprecation warning.\n * @param hasRestArgs Optional flag indicating that the function's final argument is\n * `...args` (to capture any extra arguments), in which case we capture them and return\n * as the second element of the return array.\n *\n * @returns An object containing:\n *\n * argsObject: a dictionary of function arguments, either passed through from args[0] if\n * args[0] is an object, or created from `args` and `argNames` if the args are a\n * deprecated positional argument call.\n *\n * restArgs: an array of the \"...args\" passed to the function if `hasRestArgs` is true;\n * otherwise it is `undefined`.\n */\n// Allow use of `object` type\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nconst handleDeprecatedPositionalArgs = (args, methodName, argNames, hasRestArgs) => {\n  if (typeof args[0] !== \"object\") {\n    const restArgsText = hasRestArgs ? \", ...args\" : \"\";\n    deprecationWarning(`${methodName}(${argNames.join(\", \")}${restArgsText})`, `${methodName}({ ${argNames.join(\", \")} }${restArgsText})`); // Convert the array of arguments into a dictionary keyed by the relevant argName\n\n    const argsObject = argNames.reduce((prev, argName, index) => {\n      return { ...prev,\n        [argName]: args[index]\n      };\n    }, {});\n    const restArgs = hasRestArgs ? args.slice(argNames.length) : undefined;\n    return {\n      argsObject,\n      restArgs\n    };\n  }\n\n  return {\n    argsObject: args[0],\n    restArgs: hasRestArgs ? args.slice(1) : undefined\n  };\n}; ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Used as a key by Realm React in `useQuery`, to store the original object\n// which is being proxied, for compatibility with JSC pre-v11 (#4541)\n\n\nconst PROXY_TARGET = Symbol(\"PROXY_TARGET\"); // Used to indicate that an object is a proxied Realm.Dictionary, to allow us\n// to correctly detect Dictionaries in toJSON when using JSC pre-v11 (#4674)\n\nconst IS_PROXIED_DICTIONARY = Symbol(\"IS_PROXIED_DICTIONARY\");\nvar symbols = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  PROXY_TARGET: PROXY_TARGET,\n  IS_PROXIED_DICTIONARY: IS_PROXIED_DICTIONARY\n}); ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Exports a globalThis which is polyfilled for iOS 11/12\n// From https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nconst check = function (it) {\n  return it && it.Math == Math && it;\n}; // eslint-disable-next-line no-restricted-globals\n\n\nconst safeGlobalThis = // eslint-disable-next-line no-restricted-globals\ncheck(typeof globalThis == \"object\" && globalThis) || check(typeof window == \"object\" && window) || // eslint-disable-next-line no-restricted-globals -- safe\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore allow `self`\ncheck(typeof self == \"object\" && self) || // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore allow `global`\ncheck(typeof global == \"object\" && global) || // eslint-disable-next-line no-new-func -- fallback\nfunction () {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore allow `this`\n  return this;\n}() || Function(\"return this\")(); ////////////////////////////////////////////////////////////////////////////\n// React/React Native set a global __DEV__ variable when running in dev mode\n\n\nsetIsDevelopmentMode(typeof __DEV__ !== \"undefined\" && __DEV__);\nexport { deprecationWarning, handleDeprecatedPositionalArgs, safeGlobalThis, symbols };","map":{"version":3,"names":["isDevelopmentMode","setIsDevelopmentMode","state","deprecationWarning","deprecatedItem","suggestedReplacement","console","warn","handleDeprecatedPositionalArgs","args","methodName","argNames","hasRestArgs","restArgsText","join","argsObject","reduce","prev","argName","index","restArgs","slice","length","undefined","PROXY_TARGET","Symbol","IS_PROXIED_DICTIONARY","symbols","Object","freeze","__proto__","check","it","Math","safeGlobalThis","globalThis","window","self","global","Function","__DEV__"],"sources":["/Users/sandeepjain/mongoauth/node_modules/@realm/common/dist/bundle.dom.es.js"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2021 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Check whether the user's app is running in \"development mode\" (e.g. `npm run dev`\n * for a React app, or `NODE_ENV=development` for a Node app). Each platform's entry\n * point should define the value of this using `setIsDevelopmentMode`.\n * The default behaviour is to always return `false`.\n *\n * @returns true if the user's app is running in development mode, false otherwise\n */\nlet isDevelopmentMode = false;\n/**\n * Set the value of `isDevelopmentMode`. This allows each entry point (node vs DOM)\n * to use its own method for determining whether we are in development mode.\n *\n * @param state A boolean indicating whether the user's app is running in\n * development mode or not.\n */\nconst setIsDevelopmentMode = (state) => {\n    isDevelopmentMode = state;\n};\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Display a deprecation warning for features being removed in the next major version\n * to users in development mode (as best as we can detect this, see `isDevelopmentMode`)\n *\n * @param deprecatedItem The method signature or name of the deprecated item\n * @param suggestedReplacement The method signature or name of the suggested replacement\n */\nconst deprecationWarning = (deprecatedItem, suggestedReplacement) => {\n    if (!isDevelopmentMode)\n        return;\n    console.warn(`Deprecation warning from Realm: ${deprecatedItem} is deprecated and will be removed in a future major release. Consider switching to ${suggestedReplacement}.`);\n};\n/**\n * Helper function for migrating from positional arguments to a single dictionary argument.\n * Check the arguments passed to a function, if the first argument is not an object (i.e. it\n * is presumed to be a deprecated positional-style call), shows a deprecation warning and\n * converts the positional arguments into an object matching the expected \"new\" shape.\n *\n * @param args Array of arguments passed to the function (captured with `...args`).\n * @param methodName The name of the method, used to show the deprecation warning.\n * @param argNames The list of positional argument names, used to covert them into\n * an object if a deprecated call is made and to show the deprecation warning.\n * @param hasRestArgs Optional flag indicating that the function's final argument is\n * `...args` (to capture any extra arguments), in which case we capture them and return\n * as the second element of the return array.\n *\n * @returns An object containing:\n *\n * argsObject: a dictionary of function arguments, either passed through from args[0] if\n * args[0] is an object, or created from `args` and `argNames` if the args are a\n * deprecated positional argument call.\n *\n * restArgs: an array of the \"...args\" passed to the function if `hasRestArgs` is true;\n * otherwise it is `undefined`.\n */\n// Allow use of `object` type\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst handleDeprecatedPositionalArgs = (args, methodName, argNames, hasRestArgs) => {\n    if (typeof args[0] !== \"object\") {\n        const restArgsText = hasRestArgs ? \", ...args\" : \"\";\n        deprecationWarning(`${methodName}(${argNames.join(\", \")}${restArgsText})`, `${methodName}({ ${argNames.join(\", \")} }${restArgsText})`);\n        // Convert the array of arguments into a dictionary keyed by the relevant argName\n        const argsObject = argNames.reduce((prev, argName, index) => {\n            return { ...prev, [argName]: args[index] };\n        }, {});\n        const restArgs = hasRestArgs ? args.slice(argNames.length) : undefined;\n        return { argsObject, restArgs };\n    }\n    return { argsObject: args[0], restArgs: hasRestArgs ? args.slice(1) : undefined };\n};\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Used as a key by Realm React in `useQuery`, to store the original object\n// which is being proxied, for compatibility with JSC pre-v11 (#4541)\nconst PROXY_TARGET = Symbol(\"PROXY_TARGET\");\n// Used to indicate that an object is a proxied Realm.Dictionary, to allow us\n// to correctly detect Dictionaries in toJSON when using JSC pre-v11 (#4674)\nconst IS_PROXIED_DICTIONARY = Symbol(\"IS_PROXIED_DICTIONARY\");\n\nvar symbols = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    PROXY_TARGET: PROXY_TARGET,\n    IS_PROXIED_DICTIONARY: IS_PROXIED_DICTIONARY\n});\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2022 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// Exports a globalThis which is polyfilled for iOS 11/12\n// From https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/global.js\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst check = function (it) {\n    return it && it.Math == Math && it;\n};\n// eslint-disable-next-line no-restricted-globals\nconst safeGlobalThis = \n// eslint-disable-next-line no-restricted-globals\ncheck(typeof globalThis == \"object\" && globalThis) ||\n    check(typeof window == \"object\" && window) ||\n    // eslint-disable-next-line no-restricted-globals -- safe\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore allow `self`\n    check(typeof self == \"object\" && self) ||\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore allow `global`\n    check(typeof global == \"object\" && global) ||\n    // eslint-disable-next-line no-new-func -- fallback\n    (function () {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore allow `this`\n        return this;\n    })() ||\n    Function(\"return this\")();\n\n////////////////////////////////////////////////////////////////////////////\n// React/React Native set a global __DEV__ variable when running in dev mode\nsetIsDevelopmentMode(typeof __DEV__ !== \"undefined\" && __DEV__);\n\nexport { deprecationWarning, handleDeprecatedPositionalArgs, safeGlobalThis, symbols };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,iBAAiB,GAAG,KAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAIC,KAAD,IAAW;EACpCF,iBAAiB,GAAGE,KAApB;AACH,CAFD,C,CAIA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,kBAAkB,GAAG,CAACC,cAAD,EAAiBC,oBAAjB,KAA0C;EACjE,IAAI,CAACL,iBAAL,EACI;EACJM,OAAO,CAACC,IAAR,CAAc,mCAAkCH,cAAe,uFAAsFC,oBAAqB,GAA1K;AACH,CAJD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,8BAA8B,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAA6BC,WAA7B,KAA6C;EAChF,IAAI,OAAOH,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;IAC7B,MAAMI,YAAY,GAAGD,WAAW,GAAG,WAAH,GAAiB,EAAjD;IACAT,kBAAkB,CAAE,GAAEO,UAAW,IAAGC,QAAQ,CAACG,IAAT,CAAc,IAAd,CAAoB,GAAED,YAAa,GAArD,EAA0D,GAAEH,UAAW,MAAKC,QAAQ,CAACG,IAAT,CAAc,IAAd,CAAoB,KAAID,YAAa,GAAjH,CAAlB,CAF6B,CAG7B;;IACA,MAAME,UAAU,GAAGJ,QAAQ,CAACK,MAAT,CAAgB,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,KAA0B;MACzD,OAAO,EAAE,GAAGF,IAAL;QAAW,CAACC,OAAD,GAAWT,IAAI,CAACU,KAAD;MAA1B,CAAP;IACH,CAFkB,EAEhB,EAFgB,CAAnB;IAGA,MAAMC,QAAQ,GAAGR,WAAW,GAAGH,IAAI,CAACY,KAAL,CAAWV,QAAQ,CAACW,MAApB,CAAH,GAAiCC,SAA7D;IACA,OAAO;MAAER,UAAF;MAAcK;IAAd,CAAP;EACH;;EACD,OAAO;IAAEL,UAAU,EAAEN,IAAI,CAAC,CAAD,CAAlB;IAAuBW,QAAQ,EAAER,WAAW,GAAGH,IAAI,CAACY,KAAL,CAAW,CAAX,CAAH,GAAmBE;EAA/D,CAAP;AACH,CAZD,C,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,YAAY,GAAGC,MAAM,CAAC,cAAD,CAA3B,C,CACA;AACA;;AACA,MAAMC,qBAAqB,GAAGD,MAAM,CAAC,uBAAD,CAApC;AAEA,IAAIE,OAAO,GAAG,aAAaC,MAAM,CAACC,MAAP,CAAc;EACrCC,SAAS,EAAE,IAD0B;EAErCN,YAAY,EAAEA,YAFuB;EAGrCE,qBAAqB,EAAEA;AAHc,CAAd,CAA3B,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMK,KAAK,GAAG,UAAUC,EAAV,EAAc;EACxB,OAAOA,EAAE,IAAIA,EAAE,CAACC,IAAH,IAAWA,IAAjB,IAAyBD,EAAhC;AACH,CAFD,C,CAGA;;;AACA,MAAME,cAAc,GACpB;AACAH,KAAK,CAAC,OAAOI,UAAP,IAAqB,QAArB,IAAiCA,UAAlC,CAAL,IACIJ,KAAK,CAAC,OAAOK,MAAP,IAAiB,QAAjB,IAA6BA,MAA9B,CADT,IAEI;AACA;AACA;AACAL,KAAK,CAAC,OAAOM,IAAP,IAAe,QAAf,IAA2BA,IAA5B,CALT,IAMI;AACA;AACAN,KAAK,CAAC,OAAOO,MAAP,IAAiB,QAAjB,IAA6BA,MAA9B,CART,IASI;AACC,YAAY;EACT;EACA;EACA,OAAO,IAAP;AACH,CAJD,EAVJ,IAeIC,QAAQ,CAAC,aAAD,CAAR,EAjBJ,C,CAmBA;AACA;;;AACAtC,oBAAoB,CAAC,OAAOuC,OAAP,KAAmB,WAAnB,IAAkCA,OAAnC,CAApB;AAEA,SAASrC,kBAAT,EAA6BK,8BAA7B,EAA6D0B,cAA7D,EAA6EP,OAA7E"},"metadata":{},"sourceType":"module"}