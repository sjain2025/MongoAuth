{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst {\n  symbols\n} = require(\"@realm/common\");\n\nconst dictionaryHandler = {\n  get(target, key) {\n    // Allows us to detect if this is a proxied Dictionary on JSC pre-v11. See realm-common/symbols.ts for details.\n    if (key === symbols.IS_PROXIED_DICTIONARY) {\n      return true;\n    }\n\n    if (typeof target[key] === \"function\") {\n      return function () {\n        return target[key].apply(target, arguments);\n      };\n    }\n\n    if (typeof key === \"symbol\") {\n      key = Symbol.keyFor(key);\n    }\n\n    return target.getter(key);\n  },\n\n  set(target, key, value, receiver) {\n    target.setter(key, value);\n    return receiver;\n  },\n\n  has(target, key) {\n    return target._has(key);\n  },\n\n  deleteProperty(target, key) {\n    // this array must be kept in sync with methods implemented by js_dictonary.hpp\n    const methodNames = [\"set\", \"remove\", \"addListener\", \"removeListener\", \"removeAllListeners\"];\n\n    if (!methodNames.includes(key)) {\n      target.remove(key);\n    }\n\n    return true;\n  },\n\n  ownKeys(target) {\n    return target._keys();\n  },\n\n  getOwnPropertyDescriptor() {\n    return {\n      enumerable: true,\n      configurable: true,\n      writeable: true\n    };\n  }\n\n};\n\nfunction DictionaryProxy(dictionary) {\n  return new Proxy(dictionary, dictionaryHandler);\n}\n\nmodule.exports = {\n  DictionaryProxy\n};","map":{"version":3,"names":["symbols","require","dictionaryHandler","get","target","key","IS_PROXIED_DICTIONARY","apply","arguments","Symbol","keyFor","getter","set","value","receiver","setter","has","_has","deleteProperty","methodNames","includes","remove","ownKeys","_keys","getOwnPropertyDescriptor","enumerable","configurable","writeable","DictionaryProxy","dictionary","Proxy","module","exports"],"sources":["/Users/sandeepjain/mongoauth/node_modules/realm/lib/dictionary.js"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nconst { symbols } = require(\"@realm/common\");\n\nconst dictionaryHandler = {\n  get(target, key) {\n    // Allows us to detect if this is a proxied Dictionary on JSC pre-v11. See realm-common/symbols.ts for details.\n    if (key === symbols.IS_PROXIED_DICTIONARY) {\n      return true;\n    }\n\n    if (typeof target[key] === \"function\") {\n      return function () {\n        return target[key].apply(target, arguments);\n      };\n    }\n\n    if (typeof key === \"symbol\") {\n      key = Symbol.keyFor(key);\n    }\n\n    return target.getter(key);\n  },\n\n  set(target, key, value, receiver) {\n    target.setter(key, value);\n    return receiver;\n  },\n\n  has(target, key) {\n    return target._has(key);\n  },\n\n  deleteProperty(target, key) {\n    // this array must be kept in sync with methods implemented by js_dictonary.hpp\n    const methodNames = [\"set\", \"remove\", \"addListener\", \"removeListener\", \"removeAllListeners\"];\n    if (!methodNames.includes(key)) {\n      target.remove(key);\n    }\n    return true;\n  },\n\n  ownKeys(target) {\n    return target._keys();\n  },\n\n  getOwnPropertyDescriptor() {\n    return {\n      enumerable: true,\n      configurable: true,\n      writeable: true,\n    };\n  },\n};\n\nfunction DictionaryProxy(dictionary) {\n  return new Proxy(dictionary, dictionaryHandler);\n}\n\nmodule.exports = {\n  DictionaryProxy,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM;EAAEA;AAAF,IAAcC,OAAO,CAAC,eAAD,CAA3B;;AAEA,MAAMC,iBAAiB,GAAG;EACxBC,GAAG,CAACC,MAAD,EAASC,GAAT,EAAc;IACf;IACA,IAAIA,GAAG,KAAKL,OAAO,CAACM,qBAApB,EAA2C;MACzC,OAAO,IAAP;IACD;;IAED,IAAI,OAAOF,MAAM,CAACC,GAAD,CAAb,KAAuB,UAA3B,EAAuC;MACrC,OAAO,YAAY;QACjB,OAAOD,MAAM,CAACC,GAAD,CAAN,CAAYE,KAAZ,CAAkBH,MAAlB,EAA0BI,SAA1B,CAAP;MACD,CAFD;IAGD;;IAED,IAAI,OAAOH,GAAP,KAAe,QAAnB,EAA6B;MAC3BA,GAAG,GAAGI,MAAM,CAACC,MAAP,CAAcL,GAAd,CAAN;IACD;;IAED,OAAOD,MAAM,CAACO,MAAP,CAAcN,GAAd,CAAP;EACD,CAlBuB;;EAoBxBO,GAAG,CAACR,MAAD,EAASC,GAAT,EAAcQ,KAAd,EAAqBC,QAArB,EAA+B;IAChCV,MAAM,CAACW,MAAP,CAAcV,GAAd,EAAmBQ,KAAnB;IACA,OAAOC,QAAP;EACD,CAvBuB;;EAyBxBE,GAAG,CAACZ,MAAD,EAASC,GAAT,EAAc;IACf,OAAOD,MAAM,CAACa,IAAP,CAAYZ,GAAZ,CAAP;EACD,CA3BuB;;EA6BxBa,cAAc,CAACd,MAAD,EAASC,GAAT,EAAc;IAC1B;IACA,MAAMc,WAAW,GAAG,CAAC,KAAD,EAAQ,QAAR,EAAkB,aAAlB,EAAiC,gBAAjC,EAAmD,oBAAnD,CAApB;;IACA,IAAI,CAACA,WAAW,CAACC,QAAZ,CAAqBf,GAArB,CAAL,EAAgC;MAC9BD,MAAM,CAACiB,MAAP,CAAchB,GAAd;IACD;;IACD,OAAO,IAAP;EACD,CApCuB;;EAsCxBiB,OAAO,CAAClB,MAAD,EAAS;IACd,OAAOA,MAAM,CAACmB,KAAP,EAAP;EACD,CAxCuB;;EA0CxBC,wBAAwB,GAAG;IACzB,OAAO;MACLC,UAAU,EAAE,IADP;MAELC,YAAY,EAAE,IAFT;MAGLC,SAAS,EAAE;IAHN,CAAP;EAKD;;AAhDuB,CAA1B;;AAmDA,SAASC,eAAT,CAAyBC,UAAzB,EAAqC;EACnC,OAAO,IAAIC,KAAJ,CAAUD,UAAV,EAAsB3B,iBAAtB,CAAP;AACD;;AAED6B,MAAM,CAACC,OAAP,GAAiB;EACfJ;AADe,CAAjB"},"metadata":{},"sourceType":"script"}