{"ast":null,"code":"////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst {\n  EJSON\n} = require(\"bson\");\n\nconst {\n  promisify\n} = require(\"./utils.js\");\n\nconst instanceMethods = {\n  registerUser(details) {\n    return promisify(cb => this._registerUser(details, cb));\n  },\n\n  confirmUser(details) {\n    return promisify(cb => this._confirmUser(details, cb));\n  },\n\n  resendConfirmationEmail(details) {\n    return promisify(cb => this._resendConfirmationEmail(details, cb));\n  },\n\n  retryCustomConfirmation(details) {\n    return promisify(cb => this._retryCustomConfirmation(details, cb));\n  },\n\n  sendResetPasswordEmail(details) {\n    return promisify(cb => this._sendResetPasswordEmail(details, cb));\n  },\n\n  resetPassword(details) {\n    return promisify(cb => this._resetPassword(details, cb));\n  },\n\n  callResetPasswordFunction(details) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    const stringifiedArgs = EJSON.stringify(args, {\n      relaxed: false\n    });\n    return promisify(cb => this._callResetPasswordFunction(details, stringifiedArgs, cb));\n  }\n\n};\nconst staticMethods = {// none\n};\nmodule.exports = {\n  static: staticMethods,\n  instance: instanceMethods\n};","map":{"version":3,"names":["EJSON","require","promisify","instanceMethods","registerUser","details","cb","_registerUser","confirmUser","_confirmUser","resendConfirmationEmail","_resendConfirmationEmail","retryCustomConfirmation","_retryCustomConfirmation","sendResetPasswordEmail","_sendResetPasswordEmail","resetPassword","_resetPassword","callResetPasswordFunction","args","stringifiedArgs","stringify","relaxed","_callResetPasswordFunction","staticMethods","module","exports","static","instance"],"sources":["/Users/sandeepjain/mongoauth/node_modules/realm/lib/email-password-auth-methods.js"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\nconst { EJSON } = require(\"bson\");\n\nconst { promisify } = require(\"./utils.js\");\n\nconst instanceMethods = {\n  registerUser(details) {\n    return promisify((cb) => this._registerUser(details, cb));\n  },\n\n  confirmUser(details) {\n    return promisify((cb) => this._confirmUser(details, cb));\n  },\n\n  resendConfirmationEmail(details) {\n    return promisify((cb) => this._resendConfirmationEmail(details, cb));\n  },\n\n  retryCustomConfirmation(details) {\n    return promisify((cb) => this._retryCustomConfirmation(details, cb));\n  },\n\n  sendResetPasswordEmail(details) {\n    return promisify((cb) => this._sendResetPasswordEmail(details, cb));\n  },\n\n  resetPassword(details) {\n    return promisify((cb) => this._resetPassword(details, cb));\n  },\n\n  callResetPasswordFunction(details, ...args) {\n    const stringifiedArgs = EJSON.stringify(args, { relaxed: false });\n    return promisify((cb) => this._callResetPasswordFunction(details, stringifiedArgs, cb));\n  },\n};\n\nconst staticMethods = {\n  // none\n};\n\nmodule.exports = {\n  static: staticMethods,\n  instance: instanceMethods,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAM;EAAEA;AAAF,IAAYC,OAAO,CAAC,MAAD,CAAzB;;AAEA,MAAM;EAAEC;AAAF,IAAgBD,OAAO,CAAC,YAAD,CAA7B;;AAEA,MAAME,eAAe,GAAG;EACtBC,YAAY,CAACC,OAAD,EAAU;IACpB,OAAOH,SAAS,CAAEI,EAAD,IAAQ,KAAKC,aAAL,CAAmBF,OAAnB,EAA4BC,EAA5B,CAAT,CAAhB;EACD,CAHqB;;EAKtBE,WAAW,CAACH,OAAD,EAAU;IACnB,OAAOH,SAAS,CAAEI,EAAD,IAAQ,KAAKG,YAAL,CAAkBJ,OAAlB,EAA2BC,EAA3B,CAAT,CAAhB;EACD,CAPqB;;EAStBI,uBAAuB,CAACL,OAAD,EAAU;IAC/B,OAAOH,SAAS,CAAEI,EAAD,IAAQ,KAAKK,wBAAL,CAA8BN,OAA9B,EAAuCC,EAAvC,CAAT,CAAhB;EACD,CAXqB;;EAatBM,uBAAuB,CAACP,OAAD,EAAU;IAC/B,OAAOH,SAAS,CAAEI,EAAD,IAAQ,KAAKO,wBAAL,CAA8BR,OAA9B,EAAuCC,EAAvC,CAAT,CAAhB;EACD,CAfqB;;EAiBtBQ,sBAAsB,CAACT,OAAD,EAAU;IAC9B,OAAOH,SAAS,CAAEI,EAAD,IAAQ,KAAKS,uBAAL,CAA6BV,OAA7B,EAAsCC,EAAtC,CAAT,CAAhB;EACD,CAnBqB;;EAqBtBU,aAAa,CAACX,OAAD,EAAU;IACrB,OAAOH,SAAS,CAAEI,EAAD,IAAQ,KAAKW,cAAL,CAAoBZ,OAApB,EAA6BC,EAA7B,CAAT,CAAhB;EACD,CAvBqB;;EAyBtBY,yBAAyB,CAACb,OAAD,EAAmB;IAAA,kCAANc,IAAM;MAANA,IAAM;IAAA;;IAC1C,MAAMC,eAAe,GAAGpB,KAAK,CAACqB,SAAN,CAAgBF,IAAhB,EAAsB;MAAEG,OAAO,EAAE;IAAX,CAAtB,CAAxB;IACA,OAAOpB,SAAS,CAAEI,EAAD,IAAQ,KAAKiB,0BAAL,CAAgClB,OAAhC,EAAyCe,eAAzC,EAA0Dd,EAA1D,CAAT,CAAhB;EACD;;AA5BqB,CAAxB;AA+BA,MAAMkB,aAAa,GAAG,CACpB;AADoB,CAAtB;AAIAC,MAAM,CAACC,OAAP,GAAiB;EACfC,MAAM,EAAEH,aADO;EAEfI,QAAQ,EAAEzB;AAFK,CAAjB"},"metadata":{},"sourceType":"script"}